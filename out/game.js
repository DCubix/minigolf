// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var engine_GameCanvas = function(target) {
	this.accum = 0.0;
	this.lastTime = new Date().getTime() / 1000;
	this.assets = new engine_AssetManager();
	this.canvas = js_Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
	this.buffer = js_Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
	this.input = new engine_InputManager(this.canvas);
	if(target == null) {
		window.document.body.appendChild(this.canvas);
	} else {
		target.appendChild(this.canvas);
	}
	this.canvas.width = 800;
	this.canvas.height = 600;
	this.buffer.width = js_Boot.__cast(this.canvas.width / 2 , Int);
	this.buffer.height = js_Boot.__cast(this.canvas.height / 2 , Int);
	this.ctx = this.canvas.getContext("2d",null);
	this.ctx.imageSmoothingEnabled = false;
	this.bctx = this.buffer.getContext("2d",null);
	this.bctx.imageSmoothingEnabled = false;
	this.pixels = this.bctx.createImageData(this.buffer.width,this.buffer.height);
};
engine_GameCanvas.__name__ = true;
engine_GameCanvas.prototype = {
	onPreload: function() {
	}
	,onInit: function() {
	}
	,onDraw: function() {
	}
	,onUpdate: function(dt) {
	}
	,start: function() {
		var _gthis = this;
		this.onPreload();
		this.assets.loadAll(function() {
			_gthis.onInit();
			_gthis._mainloop_(0.0);
		});
	}
	,dot: function(x,y,r,g,b) {
		if(x < 0 || x >= this.buffer.width || y < 0 || y >= this.buffer.height) {
			return;
		}
		var i = (x + y * this.buffer.width) * 4;
		this.pixels.data[i] = r;
		this.pixels.data[i + 1] = g;
		this.pixels.data[i + 2] = b;
		this.pixels.data[i + 3] = 255;
	}
	,sprite: function(spr,x,y,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		var w = sw > 0 ? sw : spr.width;
		var _g1 = 0;
		var _g = sh > 0 ? sh : spr.height;
		while(_g1 < _g) {
			var iy = _g1++;
			var _g3 = 0;
			var _g2 = w;
			while(_g3 < _g2) {
				var ix = _g3++;
				var si = (ix + sx + (iy + sy) * spr.width) * 4;
				if(spr.pixels[si + 3] < 200) {
					continue;
				}
				this.dot(ix + x,iy + y,spr.pixels[si],spr.pixels[si + 1],spr.pixels[si + 2]);
			}
		}
	}
	,tile: function(spr,cols,rows,index,x,y) {
		var sw = Math.floor(spr.width / cols);
		var sh = Math.floor(spr.height / rows);
		this.sprite(spr,x,y,index % cols * sw,js_Boot.__cast(Math.floor(index / cols) * sh , Int),sw,sh);
	}
	,clear: function(r,g,b) {
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		var _g_index;
		var end = this.buffer.width * this.buffer.height * 4;
		_g_index = 0;
		while(_g_index < end) {
			var i = (_g_index += 4) - 4;
			this.pixels.data[i] = r;
			this.pixels.data[i + 1] = g;
			this.pixels.data[i + 2] = b;
			this.pixels.data[i + 3] = 255;
		}
	}
	,flip: function() {
		this.bctx.putImageData(this.pixels,0,0);
		this.ctx.drawImage(this.buffer,0,0,this.canvas.width,this.canvas.height);
	}
	,_mainloop_: function(d) {
		var currentTime = new Date().getTime() / 1000;
		var delta = currentTime - this.lastTime;
		this.lastTime = currentTime;
		this.accum += delta;
		this.input.refresh();
		while(this.accum >= 0.016666666666666666) {
			this.accum -= 0.016666666666666666;
			this.onUpdate(0.016666666666666666);
		}
		this.onDraw();
		this.flip();
		window.requestAnimationFrame($bind(this,this._mainloop_));
	}
	,__class__: engine_GameCanvas
};
var Main = function() {
	this.sx = 2;
	engine_GameCanvas.call(this);
	this.sb = new engine_SpriteBatch();
};
Main.__name__ = true;
Main.main = function() {
	new Main().start();
};
Main.__super__ = engine_GameCanvas;
Main.prototype = $extend(engine_GameCanvas.prototype,{
	onPreload: function() {
		this.assets.loadSprite("sprites.png");
	}
	,onInit: function() {
		this.sprites = this.assets.getSprite("sprites.png");
	}
	,onDraw: function() {
		this.clear();
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			this.sb.drawTile(this.sprites,8,7,0,i * 2 + Math.floor(this.sx / (i + 1)),i * 2);
		}
		this.sb.flush(this);
	}
	,onUpdate: function(dt) {
		if(this.input.isKeyHeld("d")) {
			this.sx += 40.0 * dt;
		}
	}
	,__class__: Main
});
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var engine_AssetType = { __ename__ : true, __constructs__ : ["ASSET_SPRITE"] };
engine_AssetType.ASSET_SPRITE = ["ASSET_SPRITE",0];
engine_AssetType.ASSET_SPRITE.__enum__ = engine_AssetType;
var engine_Asset = function(path,type) {
	this.type = type;
	this.path = path;
};
engine_Asset.__name__ = true;
engine_Asset.prototype = {
	__class__: engine_Asset
};
var engine_Sprite = function() {
};
engine_Sprite.__name__ = true;
engine_Sprite.prototype = {
	__class__: engine_Sprite
};
var engine_AssetManager = function() {
	this.assets = [];
	this.sprites = new haxe_ds_StringMap();
};
engine_AssetManager.__name__ = true;
engine_AssetManager.prototype = {
	loadSprite: function(path) {
		this.assets.push(new engine_Asset(path,engine_AssetType.ASSET_SPRITE));
	}
	,getSprite: function(path) {
		var _this = this.sprites;
		if(__map_reserved[path] != null) {
			return _this.getReserved(path);
		} else {
			return _this.h[path];
		}
	}
	,loadAll: function(onFinish) {
		var _gthis = this;
		if(this.assets.length == 0) {
			onFinish();
		}
		var loadedCount = 0;
		var errCount = 0;
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var ast = [_g1[_g]];
			++_g;
			var img = [new Image()];
			img[0].onload = (function(img1,ast1) {
				return function() {
					var canvas = js_Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
					canvas.width = img1[0].width;
					canvas.height = img1[0].height;
					var ctx = canvas.getContext("2d",null);
					ctx.drawImage(img1[0],0,0);
					var spr = new engine_Sprite();
					spr.width = img1[0].width;
					spr.height = img1[0].height;
					spr.pixels = ctx.getImageData(0,0,img1[0].width,img1[0].height).data;
					var _this = _gthis.sprites;
					var key = ast1[0].path;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,spr);
					} else {
						_this.h[key] = spr;
					}
					loadedCount += 1;
					if(loadedCount + errCount >= _gthis.assets.length) {
						onFinish();
					}
				};
			})(img,ast);
			img[0].onerror = (function() {
				return function() {
					errCount += 1;
					if(loadedCount + errCount >= _gthis.assets.length) {
						onFinish();
					}
				};
			})();
			img[0].src = ast[0].path;
		}
	}
	,__class__: engine_AssetManager
};
var engine_Range = function(start,end,step) {
	this.index = start;
	this.end = end;
	this.step = step;
};
engine_Range.__name__ = true;
engine_Range.prototype = {
	hasNext: function() {
		return this.index < this.end;
	}
	,next: function() {
		var tmp = this;
		return (tmp.index += this.step) - this.step;
	}
	,__class__: engine_Range
};
var engine__$InputManager_InputState = function() {
};
engine__$InputManager_InputState.__name__ = true;
engine__$InputManager_InputState.prototype = {
	__class__: engine__$InputManager_InputState
};
var engine_InputManager = function(canvas) {
	this.mouseY = 0;
	this.mouseX = 0;
	var _gthis = this;
	this.keyboard = new haxe_ds_StringMap();
	this.mouse = new haxe_ds_IntMap();
	window.document.body.onkeydown = function(e) {
		e.preventDefault();
		var _this = _gthis.keyboard;
		var key = e.key;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			var _this1 = _gthis.keyboard;
			var key1 = e.key;
			var value = new engine__$InputManager_InputState();
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
		var _this2 = _gthis.keyboard;
		var key2 = e.key;
		(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]).pressed = true;
		var _this3 = _gthis.keyboard;
		var key3 = e.key;
		(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]).held = true;
	};
	window.document.body.onkeyup = function(e1) {
		e1.preventDefault();
		var _this4 = _gthis.keyboard;
		var key4 = e1.key;
		if(!(__map_reserved[key4] != null ? _this4.existsReserved(key4) : _this4.h.hasOwnProperty(key4))) {
			var _this5 = _gthis.keyboard;
			var key5 = e1.key;
			var value1 = new engine__$InputManager_InputState();
			if(__map_reserved[key5] != null) {
				_this5.setReserved(key5,value1);
			} else {
				_this5.h[key5] = value1;
			}
		}
		var _this6 = _gthis.keyboard;
		var key6 = e1.key;
		(__map_reserved[key6] != null ? _this6.getReserved(key6) : _this6.h[key6]).released = true;
		var _this7 = _gthis.keyboard;
		var key7 = e1.key;
		(__map_reserved[key7] != null ? _this7.getReserved(key7) : _this7.h[key7]).held = false;
	};
	window.document.body.onmousedown = function(e2) {
		e2.preventDefault();
		if(!_gthis.mouse.h.hasOwnProperty(e2.button)) {
			_gthis.mouse.h[e2.button] = new engine__$InputManager_InputState();
		}
		_gthis.mouse.h[e2.button].pressed = true;
		_gthis.mouse.h[e2.button].held = true;
	};
	window.document.body.onmouseup = function(e3) {
		e3.preventDefault();
		if(!_gthis.mouse.h.hasOwnProperty(e3.button)) {
			_gthis.mouse.h[e3.button] = new engine__$InputManager_InputState();
		}
		_gthis.mouse.h[e3.button].released = true;
		_gthis.mouse.h[e3.button].held = false;
	};
	window.document.body.onmousemove = function(e4) {
		e4.preventDefault();
		var rect = canvas.getBoundingClientRect();
		_gthis.mouseX = Math.floor((e4.clientX - rect.left) / 2);
		_gthis.mouseY = Math.floor((e4.clientY - rect.top) / 2);
	};
	canvas.oncontextmenu = function() {
		return false;
	};
};
engine_InputManager.__name__ = true;
engine_InputManager.prototype = {
	isKeyPressed: function(key) {
		var _this = this.keyboard;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.keyboard;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).pressed;
		} else {
			return false;
		}
	}
	,isKeyReleased: function(key) {
		var _this = this.keyboard;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.keyboard;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).released;
		} else {
			return false;
		}
	}
	,isKeyHeld: function(key) {
		var _this = this.keyboard;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.keyboard;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).held;
		} else {
			return false;
		}
	}
	,isMousePressed: function(btn) {
		if(this.mouse.h.hasOwnProperty(btn)) {
			return this.mouse.h[btn].pressed;
		} else {
			return false;
		}
	}
	,isMouseReleased: function(btn) {
		if(this.mouse.h.hasOwnProperty(btn)) {
			return this.mouse.h[btn].released;
		} else {
			return false;
		}
	}
	,isMouseHeld: function(btn) {
		if(this.mouse.h.hasOwnProperty(btn)) {
			return this.mouse.h[btn].held;
		} else {
			return false;
		}
	}
	,refresh: function() {
		var _this = this.keyboard;
		var e = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(e.hasNext()) {
			var e1 = e.next();
			e1.pressed = false;
			e1.released = false;
		}
		var e2 = this.mouse.iterator();
		while(e2.hasNext()) {
			var e3 = e2.next();
			e3.pressed = false;
			e3.released = false;
		}
	}
	,__class__: engine_InputManager
};
var engine_DrawType = { __ename__ : true, __constructs__ : ["SPRITE","TILE"] };
engine_DrawType.SPRITE = ["SPRITE",0];
engine_DrawType.SPRITE.__enum__ = engine_DrawType;
engine_DrawType.TILE = ["TILE",1];
engine_DrawType.TILE.__enum__ = engine_DrawType;
var engine_Sorting = { __ename__ : true, __constructs__ : ["Y_SORT","NO_SORTING"] };
engine_Sorting.Y_SORT = ["Y_SORT",0];
engine_Sorting.Y_SORT.__enum__ = engine_Sorting;
engine_Sorting.NO_SORTING = ["NO_SORTING",1];
engine_Sorting.NO_SORTING.__enum__ = engine_Sorting;
var engine_DrawCommand = function() {
};
engine_DrawCommand.__name__ = true;
engine_DrawCommand.prototype = {
	__class__: engine_DrawCommand
};
var engine_SpriteBatch = function() {
	this.commands = [];
};
engine_SpriteBatch.__name__ = true;
engine_SpriteBatch.prototype = {
	drawSprite: function(spr,x,y,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		var cmd = new engine_DrawCommand();
		cmd.drawType = engine_DrawType.SPRITE;
		cmd.x = x;
		cmd.y = y;
		cmd.sprite = spr;
		cmd.sx = sx;
		cmd.sy = sy;
		cmd.sw = sw;
		cmd.sh = sh;
		this.commands.push(cmd);
	}
	,drawTile: function(spr,cols,rows,index,x,y) {
		var cmd = new engine_DrawCommand();
		cmd.drawType = engine_DrawType.TILE;
		cmd.x = x;
		cmd.y = y;
		cmd.sprite = spr;
		cmd.tileIndex = index;
		cmd.cols = cols;
		cmd.rows = rows;
		this.commands.push(cmd);
	}
	,flush: function(canvas,sorting,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		if(sorting != null) {
			if(sorting[1] == 0) {
				this.commands.sort(function(a,b) {
					if(a.y == b.y) {
						return 0;
					}
					if(a.y > b.y) {
						return 1;
					} else {
						return -1;
					}
				});
			}
		}
		if(reverse) {
			this.commands.reverse();
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var cmd = _g1[_g];
			++_g;
			switch(cmd.drawType[1]) {
			case 0:
				canvas.sprite(cmd.sprite,cmd.x,cmd.y,cmd.sx,cmd.sy,cmd.sw,cmd.sh);
				break;
			case 1:
				canvas.tile(cmd.sprite,cmd.cols,cmd.rows,cmd.tileIndex,cmd.x,cmd.y);
				break;
			}
		}
		while(this.commands.length > 0) this.commands.pop();
	}
	,__class__: engine_SpriteBatch
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
engine_GameCanvas.TIME_STEP = 0.016666666666666666;
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
